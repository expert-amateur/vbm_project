[0.000000] (-) TimerEvent: {}
[0.000313] (pcl_sampling) JobQueued: {'identifier': 'pcl_sampling', 'dependencies': OrderedDict()}
[0.000347] (vbm_project_env) JobQueued: {'identifier': 'vbm_project_env', 'dependencies': OrderedDict()}
[0.000716] (pcl_sampling) JobStarted: {'identifier': 'pcl_sampling'}
[0.067370] (vbm_project_env) JobStarted: {'identifier': 'vbm_project_env'}
[0.100308] (-) TimerEvent: {}
[0.135595] (pcl_sampling) JobProgress: {'identifier': 'pcl_sampling', 'progress': 'cmake'}
[0.137141] (pcl_sampling) JobProgress: {'identifier': 'pcl_sampling', 'progress': 'build'}
[0.137462] (pcl_sampling) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/justin/vbm_project/build/pcl_sampling', '--', '-j12', '-l12'], 'cwd': '/home/justin/vbm_project/build/pcl_sampling', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'justin'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib:/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:'), ('HOME', '/home/justin'), ('DESKTOP_SESSION', 'ubuntu'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('GAZEBO_MASTER_URI', 'http://localhost:11345'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('MANAGERPID', '1773'), ('SYSTEMD_EXEC_PID', '1995'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('TERMINATOR_DBUS_NAME', 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5739'), ('_colcon_cd_root', '/opt/ros/humble/'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/justin/vbm_project/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'justin'), ('JOURNAL_STREAM', '8:34156'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'justin'), ('TERM', 'xterm-256color'), ('GAZEBO_MODEL_PATH', '/usr/share/gazebo/../../share/gazebo-11/models:'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '1'), ('OGRE_RESOURCE_PATH', '/usr/lib/x86_64-linux-gnu/OGRE-1.9.0'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/justin-ubuntu-22:@/tmp/.ICE-unix/1963,unix/justin-ubuntu-22:/tmp/.ICE-unix/1963'), ('INVOCATION_ID', '483f601b71104536bc778d020f3194b4'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('TERMINATOR_DBUS_PATH', '/net/tenshu/Terminator2'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('IBUS_DISABLE_SNOOPER', '1'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.R05OC2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('ROS_DOMAIN_ID', '10'), ('AMENT_PREFIX_PATH', '/home/justin/vbm_project/install/vbm_project_env:/home/justin/vbm_project/install/pcl_sampling:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('TERMINATOR_UUID', 'urn:uuid:8b38ea56-db1c-4bca-bf76-95390fd97861'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GAZEBO_RESOURCE_PATH', '/usr/share/gazebo/../../share/gazebo-11:'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('GAZEBO_MODEL_DATABASE_URI', 'http://models.gazebosim.org'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/justin/vbm_project/build/pcl_sampling'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('GAZEBO_PLUGIN_PATH', '/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/justin/vbm_project/install/vbm_project_env:/home/justin/vbm_project/install/pcl_sampling:/opt/ros/humble')]), 'shell': False}
[0.140556] (vbm_project_env) JobProgress: {'identifier': 'vbm_project_env', 'progress': 'cmake'}
[0.141932] (vbm_project_env) JobProgress: {'identifier': 'vbm_project_env', 'progress': 'build'}
[0.141972] (vbm_project_env) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/justin/vbm_project/build/vbm_project_env', '--', '-j12', '-l12'], 'cwd': '/home/justin/vbm_project/build/vbm_project_env', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'justin'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib:/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:'), ('HOME', '/home/justin'), ('DESKTOP_SESSION', 'ubuntu'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('GAZEBO_MASTER_URI', 'http://localhost:11345'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('MANAGERPID', '1773'), ('SYSTEMD_EXEC_PID', '1995'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('TERMINATOR_DBUS_NAME', 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5739'), ('_colcon_cd_root', '/opt/ros/humble/'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/justin/vbm_project/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'justin'), ('JOURNAL_STREAM', '8:34156'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'justin'), ('TERM', 'xterm-256color'), ('GAZEBO_MODEL_PATH', '/usr/share/gazebo/../../share/gazebo-11/models:'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '1'), ('OGRE_RESOURCE_PATH', '/usr/lib/x86_64-linux-gnu/OGRE-1.9.0'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/justin-ubuntu-22:@/tmp/.ICE-unix/1963,unix/justin-ubuntu-22:/tmp/.ICE-unix/1963'), ('INVOCATION_ID', '483f601b71104536bc778d020f3194b4'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('TERMINATOR_DBUS_PATH', '/net/tenshu/Terminator2'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('IBUS_DISABLE_SNOOPER', '1'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.R05OC2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('ROS_DOMAIN_ID', '10'), ('AMENT_PREFIX_PATH', '/home/justin/vbm_project/install/vbm_project_env:/home/justin/vbm_project/install/pcl_sampling:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('TERMINATOR_UUID', 'urn:uuid:8b38ea56-db1c-4bca-bf76-95390fd97861'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GAZEBO_RESOURCE_PATH', '/usr/share/gazebo/../../share/gazebo-11:'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('GAZEBO_MODEL_DATABASE_URI', 'http://models.gazebosim.org'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/justin/vbm_project/build/vbm_project_env'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('GAZEBO_PLUGIN_PATH', '/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/justin/vbm_project/install/vbm_project_env:/home/justin/vbm_project/install/pcl_sampling:/opt/ros/humble')]), 'shell': False}
[0.173493] (vbm_project_env) CommandEnded: {'returncode': 0}
[0.181184] (pcl_sampling) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target pcl_sampling\x1b[0m\n'}
[0.190654] (vbm_project_env) JobProgress: {'identifier': 'vbm_project_env', 'progress': 'install'}
[0.198499] (vbm_project_env) Command: {'cmd': ['/usr/bin/cmake', '--install', '/home/justin/vbm_project/build/vbm_project_env'], 'cwd': '/home/justin/vbm_project/build/vbm_project_env', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'justin'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib:/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:'), ('HOME', '/home/justin'), ('DESKTOP_SESSION', 'ubuntu'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('GAZEBO_MASTER_URI', 'http://localhost:11345'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('MANAGERPID', '1773'), ('SYSTEMD_EXEC_PID', '1995'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('TERMINATOR_DBUS_NAME', 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '5739'), ('_colcon_cd_root', '/opt/ros/humble/'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('COLCON_PREFIX_PATH', '/home/justin/vbm_project/install'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'justin'), ('JOURNAL_STREAM', '8:34156'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'justin'), ('TERM', 'xterm-256color'), ('GAZEBO_MODEL_PATH', '/usr/share/gazebo/../../share/gazebo-11/models:'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '1'), ('OGRE_RESOURCE_PATH', '/usr/lib/x86_64-linux-gnu/OGRE-1.9.0'), ('PATH', '/opt/ros/humble/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/justin-ubuntu-22:@/tmp/.ICE-unix/1963,unix/justin-ubuntu-22:/tmp/.ICE-unix/1963'), ('INVOCATION_ID', '483f601b71104536bc778d020f3194b4'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('TERMINATOR_DBUS_PATH', '/net/tenshu/Terminator2'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('IBUS_DISABLE_SNOOPER', '1'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.R05OC2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('ROS_DOMAIN_ID', '10'), ('AMENT_PREFIX_PATH', '/home/justin/vbm_project/install/vbm_project_env:/home/justin/vbm_project/install/pcl_sampling:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('TERMINATOR_UUID', 'urn:uuid:8b38ea56-db1c-4bca-bf76-95390fd97861'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GAZEBO_RESOURCE_PATH', '/usr/share/gazebo/../../share/gazebo-11:'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('GAZEBO_MODEL_DATABASE_URI', 'http://models.gazebosim.org'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/justin/vbm_project/build/vbm_project_env'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('GAZEBO_PLUGIN_PATH', '/usr/share/gazebo/../../lib/x86_64-linux-gnu/gazebo-11/plugins:'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/justin/vbm_project/install/vbm_project_env:/home/justin/vbm_project/install/pcl_sampling:/opt/ros/humble')]), 'shell': False}
[0.200373] (-) TimerEvent: {}
[0.205126] (vbm_project_env) StdoutLine: {'line': b'-- Install configuration: ""\n'}
[0.205523] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/launch\n'}
[0.205719] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/launch/simulation.launch.py\n'}
[0.205810] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/worlds\n'}
[0.205878] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/worlds/simulation.world\n'}
[0.205960] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/urdf\n'}
[0.206051] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/urdf/camera.urdf\n'}
[0.206134] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/ament_index/resource_index/package_run_dependencies/vbm_project_env\n'}
[0.206199] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/ament_index/resource_index/parent_prefix_path/vbm_project_env\n'}
[0.206262] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/environment/ament_prefix_path.sh\n'}
[0.206325] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/environment/ament_prefix_path.dsv\n'}
[0.206387] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/environment/path.sh\n'}
[0.206449] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/environment/path.dsv\n'}
[0.206511] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/local_setup.bash\n'}
[0.206572] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/local_setup.sh\n'}
[0.206634] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/local_setup.zsh\n'}
[0.206696] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/local_setup.dsv\n'}
[0.206757] (vbm_project_env) StdoutLine: {'line': b'-- Installing: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/package.dsv\n'}
[0.206819] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/ament_index/resource_index/packages/vbm_project_env\n'}
[0.206881] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/cmake/vbm_project_envConfig.cmake\n'}
[0.206942] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/cmake/vbm_project_envConfig-version.cmake\n'}
[0.207004] (vbm_project_env) StdoutLine: {'line': b'-- Up-to-date: /home/justin/vbm_project/install/vbm_project_env/share/vbm_project_env/package.xml\n'}
[0.207910] (vbm_project_env) CommandEnded: {'returncode': 0}
[0.211561] (pcl_sampling) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/pcl_sampling.dir/src/pcl_sampling.cpp.o\x1b[0m\n'}
[0.300587] (-) TimerEvent: {}
[0.354737] (vbm_project_env) JobEnded: {'identifier': 'vbm_project_env', 'rc': 0}
[0.400714] (-) TimerEvent: {}
[0.500984] (-) TimerEvent: {}
[0.601259] (-) TimerEvent: {}
[0.701531] (-) TimerEvent: {}
[0.801835] (-) TimerEvent: {}
[0.902139] (-) TimerEvent: {}
[1.002458] (-) TimerEvent: {}
[1.102731] (-) TimerEvent: {}
[1.203002] (-) TimerEvent: {}
[1.303278] (-) TimerEvent: {}
[1.403546] (-) TimerEvent: {}
[1.503812] (-) TimerEvent: {}
[1.604055] (-) TimerEvent: {}
[1.704327] (-) TimerEvent: {}
[1.804565] (-) TimerEvent: {}
[1.904813] (-) TimerEvent: {}
[2.005095] (-) TimerEvent: {}
[2.105362] (-) TimerEvent: {}
[2.205631] (-) TimerEvent: {}
[2.305899] (-) TimerEvent: {}
[2.406139] (-) TimerEvent: {}
[2.506418] (-) TimerEvent: {}
[2.606653] (-) TimerEvent: {}
[2.706927] (-) TimerEvent: {}
[2.807191] (-) TimerEvent: {}
[2.907460] (-) TimerEvent: {}
[3.007732] (-) TimerEvent: {}
[3.107980] (-) TimerEvent: {}
[3.208218] (-) TimerEvent: {}
[3.308452] (-) TimerEvent: {}
[3.408721] (-) TimerEvent: {}
[3.508955] (-) TimerEvent: {}
[3.609219] (-) TimerEvent: {}
[3.709509] (-) TimerEvent: {}
[3.809783] (-) TimerEvent: {}
[3.910072] (-) TimerEvent: {}
[4.010368] (-) TimerEvent: {}
[4.110655] (-) TimerEvent: {}
[4.210947] (-) TimerEvent: {}
[4.311187] (-) TimerEvent: {}
[4.411459] (-) TimerEvent: {}
[4.511732] (-) TimerEvent: {}
[4.611985] (-) TimerEvent: {}
[4.712260] (-) TimerEvent: {}
[4.812506] (-) TimerEvent: {}
[4.912786] (-) TimerEvent: {}
[5.013075] (-) TimerEvent: {}
[5.113352] (-) TimerEvent: {}
[5.213641] (-) TimerEvent: {}
[5.313936] (-) TimerEvent: {}
[5.414235] (-) TimerEvent: {}
[5.514526] (-) TimerEvent: {}
[5.614819] (-) TimerEvent: {}
[5.715115] (-) TimerEvent: {}
[5.815410] (-) TimerEvent: {}
[5.915707] (-) TimerEvent: {}
[6.015977] (-) TimerEvent: {}
[6.116240] (-) TimerEvent: {}
[6.216539] (-) TimerEvent: {}
[6.316809] (-) TimerEvent: {}
[6.417111] (-) TimerEvent: {}
[6.517429] (-) TimerEvent: {}
[6.617697] (-) TimerEvent: {}
[6.717983] (-) TimerEvent: {}
[6.818253] (-) TimerEvent: {}
[6.918534] (-) TimerEvent: {}
[7.018807] (-) TimerEvent: {}
[7.119078] (-) TimerEvent: {}
[7.219351] (-) TimerEvent: {}
[7.319619] (-) TimerEvent: {}
[7.419899] (-) TimerEvent: {}
[7.520140] (-) TimerEvent: {}
[7.620403] (-) TimerEvent: {}
[7.720690] (-) TimerEvent: {}
[7.820972] (-) TimerEvent: {}
[7.921265] (-) TimerEvent: {}
[8.021563] (-) TimerEvent: {}
[8.121858] (-) TimerEvent: {}
[8.222127] (-) TimerEvent: {}
[8.322402] (-) TimerEvent: {}
[8.422670] (-) TimerEvent: {}
[8.508610] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/type_traits.h:40\x1b[m\x1b[K,\n'}
[8.508965] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/memory.h:46\x1b[m\x1b[K,\n'}
[8.509048] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/PCLHeader.h:3\x1b[m\x1b[K,\n'}
[8.509114] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/ModelCoefficients.h:7\x1b[m\x1b[K,\n'}
[8.509176] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:1\x1b[m\x1b[K:\n'}
[8.509238] (pcl_sampling) StderrLine: {'line': b'/usr/include/pcl-1.12/pcl/point_struct_traits.h: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.509304] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/impl/point_types.hpp:2348:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.509429] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.509641] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.509703] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.509764] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:49:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>::apply<Eigen::Matrix<float, 4, 1>, pcl::fields::x>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.509824] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:46:8:\x1b[m\x1b[K   [ skipping 35 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.509885] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.509948] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.510010] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.510080] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.510141] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.510219] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.510279] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:195:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kinvalid use of incomplete type \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.510339] (pcl_sampling) StderrLine: {'line': b'  195 | struct \x1b[01;31m\x1b[KfieldList\x1b[m\x1b[K /** \\cond NO_WARN_RECURSIVE */ : fieldList<typename POD<PointT>::type> /** \\endcond */\n'}
[8.510495] (pcl_sampling) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.510555] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:195:8:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kdeclaration of \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.510616] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:40\x1b[m\x1b[K,\n'}
[8.510675] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/type_traits.h:40\x1b[m\x1b[K,\n'}
[8.510733] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/memory.h:46\x1b[m\x1b[K,\n'}
[8.510913] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/PCLHeader.h:3\x1b[m\x1b[K,\n'}
[8.511088] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/ModelCoefficients.h:7\x1b[m\x1b[K,\n'}
[8.511148] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:1\x1b[m\x1b[K:\n'}
[8.511207] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:201:3:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kcould not convert \xe2\x80\x98\x1b[01m\x1b[Kpcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >::POINT_TYPE_NOT_PROPERLY_REGISTERED201::assert_arg()\x1b[m\x1b[K\xe2\x80\x99 from \xe2\x80\x98\x1b[01m\x1b[Kmpl_::failed************ (pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >::POINT_TYPE_NOT_PROPERLY_REGISTERED::************)(Eigen::Matrix<float, 4, 1>&)\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kmpl_::assert<false>::type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kmpl_::assert<false>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[8.511271] (pcl_sampling) StderrLine: {'line': b'  201 |   \x1b[01;31m\x1b[KB\x1b[m\x1b[KOOST_MPL_ASSERT_MSG((!std::is_same<PointT, typename POD<PointT>::type>::value),\n'}
[8.511331] (pcl_sampling) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[8.511389] (pcl_sampling) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[K|\x1b[m\x1b[K\n'}
[8.511448] (pcl_sampling) StderrLine: {'line': b'      |   \x1b[01;31m\x1b[Kmpl_::failed************ (pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >::POINT_TYPE_NOT_PROPERLY_REGISTERED::************)(Eigen::Matrix<float, 4, 1>&)\x1b[m\x1b[K\n'}
[8.511507] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_types.h:354\x1b[m\x1b[K,\n'}
[8.511565] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/copy_point.hpp:40\x1b[m\x1b[K,\n'}
[8.511629] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/copy_point.h:58\x1b[m\x1b[K,\n'}
[8.511720] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/io.hpp:45\x1b[m\x1b[K,\n'}
[8.511780] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/io.h:538\x1b[m\x1b[K,\n'}
[8.511952] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/impl/pcd_io.hpp:48\x1b[m\x1b[K,\n'}
[8.512023] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:789\x1b[m\x1b[K,\n'}
[8.512083] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.512143] (pcl_sampling) StderrLine: {'line': b'/usr/include/pcl-1.12/pcl/impl/point_types.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.512203] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.512423] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.512574] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.512636] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:49:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>::apply<Eigen::Matrix<float, 4, 1>, pcl::fields::x>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.512703] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:46:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap2<boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>, Eigen::Matrix<float, 4, 1>, pcl::fields::x>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.512770] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:207:21:\x1b[m\x1b[K   [ skipping 34 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.512907] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.512972] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.513034] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.513225] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.513287] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.513352] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.513412] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/impl/point_types.hpp:2348:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.513472] (pcl_sampling) StderrLine: {'line': b' 2348 |   struct \x1b[01;31m\x1b[Khas_field\x1b[m\x1b[K : boost::mpl::contains<typename pcl::traits::fieldList<PointT>::type, Field>::type\n'}
[8.513532] (pcl_sampling) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.513591] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/not.hpp:19\x1b[m\x1b[K,\n'}
[8.513650] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/assert.hpp:17\x1b[m\x1b[K,\n'}
[8.513709] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:40\x1b[m\x1b[K,\n'}
[8.513768] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/type_traits.h:40\x1b[m\x1b[K,\n'}
[8.513832] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/memory.h:46\x1b[m\x1b[K,\n'}
[8.513892] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/PCLHeader.h:3\x1b[m\x1b[K,\n'}
[8.513951] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/ModelCoefficients.h:7\x1b[m\x1b[K,\n'}
[8.514011] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:1\x1b[m\x1b[K:\n'}
[8.514071] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/nested_type_wknd.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::nested_type_wknd<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.514132] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:23:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::and_impl<true, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514199] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514331] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514398] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514461] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514674] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:111:12:\x1b[m\x1b[K   [ skipping 33 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.514796] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514861] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514925] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.514994] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.515057] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.515125] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.515186] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:26:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.515253] (pcl_sampling) StderrLine: {'line': b'   26 | template< typename T > struct \x1b[01;31m\x1b[Knested_type_wknd\x1b[m\x1b[K\n'}
[8.515320] (pcl_sampling) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.515380] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/aux_/include_preprocessed.hpp:37\x1b[m\x1b[K,\n'}
[8.515440] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/and.hpp:42\x1b[m\x1b[K,\n'}
[8.515500] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/is_sequence.hpp:18\x1b[m\x1b[K,\n'}
[8.515560] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/for_each_type.h:46\x1b[m\x1b[K,\n'}
[8.515620] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/conversions.h:51\x1b[m\x1b[K,\n'}
[8.515681] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/file_io.h:40\x1b[m\x1b[K,\n'}
[8.515740] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:45\x1b[m\x1b[K,\n'}
[8.515799] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.515866] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::and_impl<true, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.515928] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.515989] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516051] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516119] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516180] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:111:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote5<boost::mpl::and_, mpl_::void_>::apply<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516245] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:77:8:\x1b[m\x1b[K   [ skipping 32 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.516306] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516369] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516437] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516508] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516569] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516631] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.516691] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:23:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kboost::mpl::aux::nested_type_wknd<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.516758] (pcl_sampling) StderrLine: {'line': b'   23 | struct \x1b[01;31m\x1b[Kand_impl< true,T1,T2,T3,T4 >\x1b[m\x1b[K\n'}
[8.516817] (pcl_sampling) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.516876] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_types.h:354\x1b[m\x1b[K,\n'}
[8.516936] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/copy_point.hpp:40\x1b[m\x1b[K,\n'}
[8.516996] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/copy_point.h:58\x1b[m\x1b[K,\n'}
[8.517056] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/io.hpp:45\x1b[m\x1b[K,\n'}
[8.517116] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/io.h:538\x1b[m\x1b[K,\n'}
[8.517175] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/impl/pcd_io.hpp:48\x1b[m\x1b[K,\n'}
[8.517234] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:789\x1b[m\x1b[K,\n'}
[8.517293] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.517353] (pcl_sampling) StderrLine: {'line': b'/usr/include/pcl-1.12/pcl/impl/point_types.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.517414] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517482] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517543] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517604] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:49:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>::apply<Eigen::Matrix<float, 4, 1>, pcl::fields::y>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517664] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:46:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap2<boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>, Eigen::Matrix<float, 4, 1>, pcl::fields::y>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517725] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:207:21:\x1b[m\x1b[K   [ skipping 34 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.517792] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517865] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517929] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.517991] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.518053] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.518114] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.518174] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/impl/point_types.hpp:2348:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.518235] (pcl_sampling) StderrLine: {'line': b' 2348 |   struct \x1b[01;31m\x1b[Khas_field\x1b[m\x1b[K : boost::mpl::contains<typename pcl::traits::fieldList<PointT>::type, Field>::type\n'}
[8.518295] (pcl_sampling) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.518355] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/not.hpp:19\x1b[m\x1b[K,\n'}
[8.518415] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/assert.hpp:17\x1b[m\x1b[K,\n'}
[8.518478] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:40\x1b[m\x1b[K,\n'}
[8.518539] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/type_traits.h:40\x1b[m\x1b[K,\n'}
[8.518597] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/memory.h:46\x1b[m\x1b[K,\n'}
[8.518656] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/PCLHeader.h:3\x1b[m\x1b[K,\n'}
[8.518763] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/ModelCoefficients.h:7\x1b[m\x1b[K,\n'}
[8.518824] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:1\x1b[m\x1b[K:\n'}
[8.518883] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/nested_type_wknd.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::nested_type_wknd<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> > >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.518945] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519006] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519082] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519144] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519206] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:111:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote5<boost::mpl::and_, mpl_::void_>::apply<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519268] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:77:8:\x1b[m\x1b[K   [ skipping 32 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.519334] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519402] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519465] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519528] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519595] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519663] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.519722] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:26:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.519783] (pcl_sampling) StderrLine: {'line': b'   26 | template< typename T > struct \x1b[01;31m\x1b[Knested_type_wknd\x1b[m\x1b[K\n'}
[8.519846] (pcl_sampling) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.519908] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/aux_/include_preprocessed.hpp:37\x1b[m\x1b[K,\n'}
[8.519967] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/and.hpp:42\x1b[m\x1b[K,\n'}
[8.520026] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/is_sequence.hpp:18\x1b[m\x1b[K,\n'}
[8.520111] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/for_each_type.h:46\x1b[m\x1b[K,\n'}
[8.520189] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/conversions.h:51\x1b[m\x1b[K,\n'}
[8.520249] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/file_io.h:40\x1b[m\x1b[K,\n'}
[8.520319] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:45\x1b[m\x1b[K,\n'}
[8.520395] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.520456] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.520518] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.520590] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.520653] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.520715] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:111:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote5<boost::mpl::and_, mpl_::void_>::apply<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.520793] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:77:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap5<boost::mpl::quote5<boost::mpl::and_, mpl_::void_>, boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.520860] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:429:21:\x1b[m\x1b[K   [ skipping 31 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.520920] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.520983] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.521045] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.521112] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.521174] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.521240] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.521303] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kboost::mpl::aux::nested_type_wknd<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.521366] (pcl_sampling) StderrLine: {'line': b'   48 | struct \x1b[01;31m\x1b[Kand_\x1b[m\x1b[K\n'}
[8.521426] (pcl_sampling) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[8.521486] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_types.h:354\x1b[m\x1b[K,\n'}
[8.521545] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/copy_point.hpp:40\x1b[m\x1b[K,\n'}
[8.521611] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/copy_point.h:58\x1b[m\x1b[K,\n'}
[8.521671] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/io.hpp:45\x1b[m\x1b[K,\n'}
[8.521730] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/io.h:538\x1b[m\x1b[K,\n'}
[8.521789] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/impl/pcd_io.hpp:48\x1b[m\x1b[K,\n'}
[8.521848] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:789\x1b[m\x1b[K,\n'}
[8.521907] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.521972] (pcl_sampling) StderrLine: {'line': b'/usr/include/pcl-1.12/pcl/impl/point_types.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.522038] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522102] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522162] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522222] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:49:49:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>::apply<Eigen::Matrix<float, 4, 1>, pcl::fields::z>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522284] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:46:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap2<boost::mpl::quote2<pcl::traits::has_field, mpl_::void_>, Eigen::Matrix<float, 4, 1>, pcl::fields::z>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522344] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:207:21:\x1b[m\x1b[K   [ skipping 34 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.522403] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522470] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522539] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522603] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522661] (-) TimerEvent: {}
[8.522745] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522817] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.522878] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/impl/point_types.hpp:2348:10:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::traits::fieldList<Eigen::Matrix<float, 4, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.522947] (pcl_sampling) StderrLine: {'line': b' 2348 |   struct \x1b[01;31m\x1b[Khas_field\x1b[m\x1b[K : boost::mpl::contains<typename pcl::traits::fieldList<PointT>::type, Field>::type\n'}
[8.523007] (pcl_sampling) StderrLine: {'line': b'      |          \x1b[01;31m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.523074] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/not.hpp:19\x1b[m\x1b[K,\n'}
[8.523133] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/assert.hpp:17\x1b[m\x1b[K,\n'}
[8.523194] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/point_struct_traits.h:40\x1b[m\x1b[K,\n'}
[8.523253] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/type_traits.h:40\x1b[m\x1b[K,\n'}
[8.523313] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/memory.h:46\x1b[m\x1b[K,\n'}
[8.523375] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/PCLHeader.h:3\x1b[m\x1b[K,\n'}
[8.523436] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/ModelCoefficients.h:7\x1b[m\x1b[K,\n'}
[8.523496] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:1\x1b[m\x1b[K:\n'}
[8.523555] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/nested_type_wknd.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::nested_type_wknd<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> > >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.523625] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.523690] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.523765] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.523829] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.523916] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:111:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote5<boost::mpl::and_, mpl_::void_>::apply<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.523986] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:77:8:\x1b[m\x1b[K   [ skipping 32 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.524047] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.524109] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.524175] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.524238] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.524298] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.524358] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.524419] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:26:31:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.524481] (pcl_sampling) StderrLine: {'line': b'   26 | template< typename T > struct \x1b[01;31m\x1b[Knested_type_wknd\x1b[m\x1b[K\n'}
[8.524540] (pcl_sampling) StderrLine: {'line': b'      |                               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.524598] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/aux_/include_preprocessed.hpp:37\x1b[m\x1b[K,\n'}
[8.524663] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/and.hpp:42\x1b[m\x1b[K,\n'}
[8.524721] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/is_sequence.hpp:18\x1b[m\x1b[K,\n'}
[8.524780] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/for_each_type.h:46\x1b[m\x1b[K,\n'}
[8.524839] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/conversions.h:51\x1b[m\x1b[K,\n'}
[8.524904] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/file_io.h:40\x1b[m\x1b[K,\n'}
[8.524963] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:45\x1b[m\x1b[K,\n'}
[8.525027] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.525091] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.525156] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class U> static char (& boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::gcc_3_2_wknd::test<U>(const volatile boost::mpl::aux::type_wrapper<T>*, boost::mpl::aux::type_wrapper<typename U::type>*))[2] [with U = boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525232] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconst bool boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >::value\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525296] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/has_type.hpp:20:1:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::has_type<boost::mpl::and_<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525363] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/quote.hpp:111:12:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::quote5<boost::mpl::and_, mpl_::void_>::apply<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525427] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:77:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap5<boost::mpl::quote5<boost::mpl::and_, mpl_::void_>, boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::z>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525498] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:429:21:\x1b[m\x1b[K   [ skipping 31 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.525559] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525621] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525683] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525750] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525815] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525877] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.525935] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kboost::mpl::aux::nested_type_wknd<boost::mpl::and_<boost::mpl::and_<mpl_::bool_<true>, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::x>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >, pcl::traits::has_field<Eigen::Matrix<float, 4, 1>, pcl::fields::y>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.525998] (pcl_sampling) StderrLine: {'line': b'   48 | struct \x1b[01;31m\x1b[Kand_\x1b[m\x1b[K\n'}
[8.526057] (pcl_sampling) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[8.526115] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::aux::and_impl<true, boost::mpl::apply<pcl::traits::has_xyz<mpl_::arg<1> >, Eigen::Matrix<float, 4, 1>, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.526176] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:48:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::and_<boost::mpl::apply<pcl::traits::has_xyz<mpl_::arg<1> >, pcl::PointXYZ, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::mpl::apply<pcl::traits::has_xyz<mpl_::arg<1> >, Eigen::Matrix<float, 4, 1>, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, mpl_::bool_<true>, mpl_::bool_<true>, mpl_::bool_<true> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526243] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/accumulators.hpp:221:14:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >::apply<pcl::detail::AccumulatorXYZ>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526310] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:36:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, pcl::detail::AccumulatorXYZ>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526371] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:144:21:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > >::apply<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526433] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:36:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap1<boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > >, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526500] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply.hpp:42:8:\x1b[m\x1b[K   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.526560] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526627] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526690] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526788] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526853] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.526913] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.526973] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/and.hpp:23:8:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kvalue\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kboost::mpl::aux::nested_type_wknd<boost::mpl::apply<pcl::traits::has_xyz<mpl_::arg<1> >, Eigen::Matrix<float, 4, 1>, mpl_::na, mpl_::na, mpl_::na, mpl_::na> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.527033] (pcl_sampling) StderrLine: {'line': b'   23 | struct \x1b[01;31m\x1b[Kand_impl< true,T1,T2,T3,T4 >\x1b[m\x1b[K\n'}
[8.527092] (pcl_sampling) StderrLine: {'line': b'      |        \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.527157] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/mpl/aux_/include_preprocessed.hpp:37\x1b[m\x1b[K,\n'}
[8.527217] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/bind.hpp:50\x1b[m\x1b[K,\n'}
[8.527282] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/lambda.hpp:18\x1b[m\x1b[K,\n'}
[8.527347] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/apply.hpp:25\x1b[m\x1b[K,\n'}
[8.527408] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/aux_/fold_impl.hpp:19\x1b[m\x1b[K,\n'}
[8.527469] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/fold.hpp:20\x1b[m\x1b[K,\n'}
[8.527529] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/mpl/remove_if.hpp:18\x1b[m\x1b[K,\n'}
[8.527588] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/for_each_type.h:51\x1b[m\x1b[K,\n'}
[8.527647] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/conversions.h:51\x1b[m\x1b[K,\n'}
[8.527707] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/file_io.h:40\x1b[m\x1b[K,\n'}
[8.527766] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/io/pcd_io.h:45\x1b[m\x1b[K,\n'}
[8.527825] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:2\x1b[m\x1b[K:\n'}
[8.527893] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > >::apply<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.527962] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply_wrap.hpp:36:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap1<boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > >, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528025] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/apply.hpp:42:8:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply1<boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > >, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528088] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/query/detail/find_if.hpp:33:35:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::fusion::detail::apply_filter<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > > >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528149] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/if.hpp:63:11:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::if_<boost::fusion::detail::apply_filter<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > > >, boost::mpl::identity<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >, boost::fusion::result_of::advance_c<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528218] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/eval_if.hpp:37:41:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::eval_if<boost::fusion::detail::apply_filter<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > > >, boost::mpl::identity<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0> >, boost::fusion::result_of::advance_c<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, 1> >\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528282] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/query/detail/find_if.hpp:148:51:\x1b[m\x1b[K   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\n'}
[8.528349] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528417] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528481] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528548] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528609] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528670] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.528729] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/mpl/aux_/preprocessed/gcc/bind.hpp:144:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct boost::mpl::apply_wrap1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, pcl::detail::AccumulatorXYZ>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.528796] (pcl_sampling) StderrLine: {'line': b'  144 |             >::type \x1b[01;31m\x1b[Ktype\x1b[m\x1b[K;\n'}
[8.528855] (pcl_sampling) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[8.528914] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:13\x1b[m\x1b[K,\n'}
[8.528973] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/fusion/include/for_each.hpp:11\x1b[m\x1b[K,\n'}
[8.529032] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/accumulators.hpp:45\x1b[m\x1b[K,\n'}
[8.529091] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/centroid.h:955\x1b[m\x1b[K,\n'}
[8.529149] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/features/normal_3d.h:46\x1b[m\x1b[K,\n'}
[8.529207] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:6\x1b[m\x1b[K:\n'}
[8.529265] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.529328] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.529396] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.529466] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.529527] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.529595] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.529656] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:46:32:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kfor_each_linear(const type, const type, pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >&, boost::fusion::result_of::equal_to<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >)\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.529731] (pcl_sampling) StderrLine: {'line': b'   46 |         \x1b[01;31m\x1b[Kdetail::for_each_linear(\x1b[m\x1b[K\n'}
[8.529791] (pcl_sampling) StderrLine: {'line': b'      |         \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~^\x1b[m\x1b[K\n'}
[8.529852] (pcl_sampling) StderrLine: {'line': b'   47 | \x1b[01;31m\x1b[K                                fusion::begin(seq)\x1b[m\x1b[K\n'}
[8.529911] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.529970] (pcl_sampling) StderrLine: {'line': b'   48 | \x1b[01;31m\x1b[K                                , fusion::end(seq)\x1b[m\x1b[K\n'}
[8.530028] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.530087] (pcl_sampling) StderrLine: {'line': b'   49 | \x1b[01;31m\x1b[K                                , f\x1b[m\x1b[K\n'}
[8.530147] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~\x1b[m\x1b[K\n'}
[8.530206] (pcl_sampling) StderrLine: {'line': b'   50 | \x1b[01;31m\x1b[K                                , result_of::equal_to<\x1b[m\x1b[K\n'}
[8.530267] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.530326] (pcl_sampling) StderrLine: {'line': b'   51 | \x1b[01;31m\x1b[K                                typename result_of::begin<Sequence>::type\x1b[m\x1b[K\n'}
[8.530386] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.530446] (pcl_sampling) StderrLine: {'line': b'   52 | \x1b[01;31m\x1b[K                                , typename result_of::end<Sequence>::type>())\x1b[m\x1b[K;\n'}
[8.530505] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.530565] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:26:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class First, class Last, class F> constexpr void boost::fusion::detail::for_each_linear(const First&, const Last&, const F&, mpl_::true_)\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.530625] (pcl_sampling) StderrLine: {'line': b'   26 |     \x1b[01;36m\x1b[Kfor_each_linear\x1b[m\x1b[K(First const&, Last const&, F const&, mpl::true_)\n'}
[8.530685] (pcl_sampling) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.530744] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:26:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.530803] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:50:46:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  cannot convert \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::result_of::equal_to<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >{boost::fusion::extension::equal_to_impl<boost::fusion::filter_view_iterator_tag>::apply<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >()}\x1b[m\x1b[K\xe2\x80\x99 (type \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::result_of::equal_to<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >\x1b[m\x1b[K\xe2\x80\x99) to type \xe2\x80\x98\x1b[01m\x1b[Kmpl_::true_\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kmpl_::bool_<true>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[8.530897] (pcl_sampling) StderrLine: {'line': b'   50 |                                 , result_of::\x1b[01;36m\x1b[Kequal_to<\x1b[m\x1b[K\n'}
[8.530958] (pcl_sampling) StderrLine: {'line': b'      |                                              \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.531017] (pcl_sampling) StderrLine: {'line': b'   51 | \x1b[01;36m\x1b[K                                typename result_of::begin<Sequence>::type\x1b[m\x1b[K\n'}
[8.531075] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.531134] (pcl_sampling) StderrLine: {'line': b'   52 | \x1b[01;36m\x1b[K                                , typename result_of::end<Sequence>::type>()\x1b[m\x1b[K);\n'}
[8.531192] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.531250] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:33:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class First, class Last, class F> constexpr void boost::fusion::detail::for_each_linear(const First&, const Last&, F&, mpl_::false_)\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.531310] (pcl_sampling) StderrLine: {'line': b'   33 |     \x1b[01;36m\x1b[Kfor_each_linear\x1b[m\x1b[K(First const& first, Last const& last, F& f, mpl::false_)\n'}
[8.531370] (pcl_sampling) StderrLine: {'line': b'      |     \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.531435] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:33:5:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.531495] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:50:46:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  cannot convert \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::result_of::equal_to<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >{boost::fusion::extension::equal_to_impl<boost::fusion::filter_view_iterator_tag>::apply<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >()}\x1b[m\x1b[K\xe2\x80\x99 (type \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::result_of::equal_to<boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >, boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > > >\x1b[m\x1b[K\xe2\x80\x99) to type \xe2\x80\x98\x1b[01m\x1b[Kmpl_::false_\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kmpl_::bool_<false>\x1b[m\x1b[K\xe2\x80\x99}\n'}
[8.531583] (pcl_sampling) StderrLine: {'line': b'   50 |                                 , result_of::\x1b[01;36m\x1b[Kequal_to<\x1b[m\x1b[K\n'}
[8.531644] (pcl_sampling) StderrLine: {'line': b'      |                                              \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[8.531704] (pcl_sampling) StderrLine: {'line': b'   51 | \x1b[01;36m\x1b[K                                typename result_of::begin<Sequence>::type\x1b[m\x1b[K\n'}
[8.531764] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.531823] (pcl_sampling) StderrLine: {'line': b'   52 | \x1b[01;36m\x1b[K                                , typename result_of::end<Sequence>::type>()\x1b[m\x1b[K);\n'}
[8.531889] (pcl_sampling) StderrLine: {'line': b'      |                                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.622761] (-) TimerEvent: {}
[8.723035] (-) TimerEvent: {}
[8.723454] (pcl_sampling) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/boost/fusion/view/filter_view/filter_view.hpp:14\x1b[m\x1b[K,\n'}
[8.723638] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/transformation/filter_if.hpp:11\x1b[m\x1b[K,\n'}
[8.723710] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/boost/fusion/include/filter_if.hpp:11\x1b[m\x1b[K,\n'}
[8.723775] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/accumulators.hpp:47\x1b[m\x1b[K,\n'}
[8.723836] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/centroid.h:955\x1b[m\x1b[K,\n'}
[8.723910] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/features/normal_3d.h:46\x1b[m\x1b[K,\n'}
[8.723970] (pcl_sampling) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:6\x1b[m\x1b[K:\n'}
[8.724030] (pcl_sampling) StderrLine: {'line': b'/usr/include/boost/fusion/view/filter_view/filter_view_iterator.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kconstexpr boost::fusion::filter_iterator<Category, First, Last, Pred>::filter_iterator(const First&) [with Category = boost::fusion::forward_traversal_tag; First = boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>; Last = boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>; Pred = pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.724096] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/view/filter_view/detail/begin_impl.hpp:38:28:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstatic constexpr boost::fusion::extension::begin_impl<boost::fusion::filter_view_tag>::apply<Sequence>::type boost::fusion::extension::begin_impl<boost::fusion::filter_view_tag>::apply<Sequence>::call(Sequence&) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; boost::fusion::extension::begin_impl<boost::fusion::filter_view_tag>::apply<Sequence>::type = boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724176] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/sequence/intrinsic/begin.hpp:82:48:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr const typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::begin<Sequence> >::type boost::fusion::begin(Sequence&) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; typename boost::lazy_enable_if<boost::fusion::traits::is_sequence<Sequence>, boost::fusion::result_of::begin<Sequence> >::type = boost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724246] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:47:46:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each_dispatch(Sequence&, F&, Tag) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; Tag = boost::fusion::forward_traversal_tag]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724315] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/detail/for_each.hpp:143:34:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr void boost::fusion::detail::for_each(Sequence&, F&, mpl_::false_) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; mpl_::false_ = mpl_::bool_<false>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724377] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/algorithm/iteration/for_each.hpp:35:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kconstexpr typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type boost::fusion::for_each(Sequence&, F) [with Sequence = boost::fusion::filter_view<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >; F = pcl::detail::GetPoint<Eigen::Matrix<float, 4, 1> >; typename boost::enable_if<boost::fusion::traits::is_sequence<Sequence> >::type = void]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724439] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:888:29:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid pcl::CentroidPoint<PointT>::get(PointOutT&) const [with PointOutT = Eigen::Matrix<float, 4, 1>; PointT = pcl::PointXYZ]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724500] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/pcl-1.12/pcl/common/impl/centroid.hpp:907:10:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::size_t pcl::computeCentroid(const pcl::PointCloud<PointT>&, PointOutT&) [with PointInT = pcl::PointXYZ; PointOutT = Eigen::Matrix<float, 4, 1>; std::size_t = long unsigned int]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724561] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/home/justin/vbm_project/src/pcl_sampling/src/pcl_sampling.cpp:133:23:\x1b[m\x1b[K   required from here\n'}
[8.724626] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/view/filter_view/filter_view_iterator.hpp:60:71:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kusing invalid field \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::filter_iterator<Category, First, Last, Pred>::first\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.724688] (pcl_sampling) StderrLine: {'line': b'   60 |             : first(filter::iter_call(first_converter::call(in_first))\x1b[01;31m\x1b[K)\x1b[m\x1b[K {}\n'}
[8.724747] (pcl_sampling) StderrLine: {'line': b'      |                                                                       \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[8.724805] (pcl_sampling) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/boost/fusion/view/filter_view/filter_view_iterator.hpp:60:38:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kiter_call\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::filter_iterator<boost::fusion::forward_traversal_tag, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> > >::filter\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kboost::fusion::detail::static_find_if<boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 0>, boost::fusion::vector_iterator<const boost::fusion::vector<pcl::detail::AccumulatorXYZ>, 1>, boost::mpl::bind1<pcl::detail::IsAccumulatorCompatible<pcl::PointXYZ, Eigen::Matrix<float, 4, 1> >, boost::mpl::bind1<boost::mpl::quote1<boost::fusion::result_of::value_of>, mpl_::arg<1> > > >\x1b[m\x1b[K\xe2\x80\x99}\n'}
[8.724886] (pcl_sampling) StderrLine: {'line': b'   60 |             : first(\x1b[01;31m\x1b[Kfilter::iter_call(first_converter::call(in_first))\x1b[m\x1b[K) {}\n'}
[8.724951] (pcl_sampling) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.823157] (-) TimerEvent: {}
[8.923437] (-) TimerEvent: {}
[9.023721] (-) TimerEvent: {}
[9.105486] (pcl_sampling) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/pcl_sampling.dir/build.make:76: CMakeFiles/pcl_sampling.dir/src/pcl_sampling.cpp.o] Error 1\n'}
[9.105763] (pcl_sampling) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/pcl_sampling.dir/all] Error 2\n'}
[9.105951] (pcl_sampling) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[9.107639] (pcl_sampling) CommandEnded: {'returncode': 2}
[9.123800] (-) TimerEvent: {}
[9.193997] (pcl_sampling) JobEnded: {'identifier': 'pcl_sampling', 'rc': 2}
[9.205753] (-) EventReactorShutdown: {}
